using System.Collections.Generic;
using System.Xml;

namespace ProtoClicker
{
    public class CEnemyTemplateList
    {
        List<CEnemyTemplate> enemies;

        public CEnemyTemplateList() 
        {
            enemies = new List<CEnemyTemplate>();
        }

        public string addEnemy(string name, string iconName, int baseLife, double lifeModifier, int baseGold, double goldModifire, double spawnChance)
        {
            CEnemyTemplate newEnemy = new CEnemyTemplate();

            newEnemy.Name = name;
            newEnemy.IconName = iconName;
            newEnemy.BaseLife = baseLife;
            newEnemy.LifeModifier = lifeModifier;
            newEnemy.BaseGold = baseGold;
            newEnemy.GoldModifier = goldModifire;
            newEnemy.SpawnChance = spawnChance;

            for (int i = 0; i < enemies.Count; i++)
                if (enemies[i].Name == name)
                {
                    enemies[i] = newEnemy;
                    return "updated";
                }

            enemies.Add(newEnemy);

            return "added";
        }

        public CEnemyTemplate getEnemyByName(string name)
        {
            foreach (CEnemyTemplate enemy in enemies)
                if (enemy.Name == name)
                    return enemy;

            return null;
        }

        public CEnemyTemplate getEnemyByIndex(int ind)
        {
            if (ind >= 0 & ind < enemies.Count)
                return enemies[ind];

            return null;
        }


        public void deleteEnemyByName(string name)
        {
            for(int i = 0; i < enemies.Count; i++)
                if (enemies[i].Name == name)
                {
                    enemies.RemoveAt(i);
                    break;
                }
        }

        public void deleteEnemyByIndex(int ind)
        {
            if (ind >= 0 & ind < enemies.Count)
                enemies.RemoveAt(ind);
        }

        public List<string> getListOfEnemyNames()
        {
            List<string> names = new List<string>();

            for (int i = 0; i < enemies.Count; i++)
            {
                names.Add(enemies[i].Name);
            }

            return names;
        }

        public List<CEnemyTemplate> getTemplates()
        {
            return enemies;
        }

        public void loadFromXML(string path)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(path);

            XmlNodeList nodeList = doc.SelectNodes("/EnemyTemplates/EnemyTemplate");
            
            foreach (XmlNode node in nodeList)
            {
                string iconName = "";
                string name = "";

                int baseLife = 0;// = int.Parse(tb_enemyBaseLife.Text);
                double lifeModifier = 0;// = double.Parse(tb_enemyLifeModifier.Text, System.Globalization.CultureInfo.InvariantCulture);

                int baseGold = 0;// = int.Parse(tb_enemyBaseGold.Text);
                double goldModifier = 0;// = double.Parse(tb_enemyGoldModifier.Text, System.Globalization.CultureInfo.InvariantCulture);

                double spawnChance = 0;// = double.Parse(tb_enemySpawnChance.Text, System.Globalization.CultureInfo.InvariantCulture);

                foreach (XmlNode child in node.ChildNodes)
                {
                    switch (child.Name)
                    {
                        case "IconName": iconName = child.InnerText; break;
                        case "Name": name = child.InnerText; break;
                        case "BaseLife": baseLife = int.Parse(child.InnerText); break;
                        case "LifeModifier": lifeModifier = double.Parse(child.InnerText, System.Globalization.CultureInfo.InvariantCulture); break;
                        case "BaseGold": baseGold = int.Parse(child.InnerText); break;
                        case "GoldModifier": goldModifier = double.Parse(child.InnerText, System.Globalization.CultureInfo.InvariantCulture); break;
                        case "SpawnChance": spawnChance = double.Parse(child.InnerText, System.Globalization.CultureInfo.InvariantCulture); break;

                    }
                }

                addEnemy(name, iconName, baseLife, lifeModifier, baseGold, goldModifier, spawnChance);

            }
        }

        public void SaveToXML(string path)
        {
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;

            XmlWriter writer = XmlWriter.Create(path, settings);

            writer.WriteStartDocument();

            writer.WriteComment("This file is generated by the program.");

            writer.WriteStartElement("EnemyTemplates");

            foreach (CEnemyTemplate enemyTemplate in enemies)
            {
                //возможно стоит вынести в CEnemyTemplate
                writer.WriteStartElement("EnemyTemplate");

                writer.WriteElementString("IconName", enemyTemplate.IconName);
                writer.WriteElementString("Name", enemyTemplate.Name);

                writer.WriteElementString("BaseLife", enemyTemplate.BaseLife.ToString());
                writer.WriteElementString("LifeModifier", enemyTemplate.LifeModifier.ToString());

                writer.WriteElementString("BaseGold", enemyTemplate.BaseLife.ToString());
                writer.WriteElementString("GoldModifier", enemyTemplate.BaseLife.ToString());

                writer.WriteElementString("SpawnChance", enemyTemplate.SpawnChance.ToString());

                writer.WriteEndElement();
            }

            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();
        }

    }
}
